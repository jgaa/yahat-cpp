#include "WebApp.h"

#include <string>

#include <boost/uuid/uuid_io.hpp>

#include "yahat/HttpServer.h"
#include "yahat/logging.h"

using namespace std;
using namespace yahat;

WebApp::WebApp() {}

yahat::Response WebApp::onReqest(const yahat::Request &req)
{
    // Content mostly generated by ChatGPT
    // ... after *many* iterations
    // ... spending more time than a frontend dev would have, just writing the code.
    static constexpr string_view content = R"content(<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YahatChat</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        header {
            background-color: #4CAF50;
            color: white;
            display: flex; /* Use flexbox for layout */
            justify-content: space-between; /* Space out elements */
            align-items: center; /* Align items vertically */
            padding: 1em;
        }

        #logout {
            margin-left: auto; /* Push the button to the right */
            background-color: #f44336;
            color: white;
            border: none;
            padding: 0.5em 1em;
            border-radius: 4px;
            cursor: pointer;
        }

        #logout:hover {
            background-color: #d32f2f;
        }

        main {
            display: flex;
            flex: 1; /* Fills the remaining space below the header */
            overflow: hidden; /* Prevents overflow issues */
        }

        #users {
            width: 20%; /* Fixed percentage width */
            min-width: 200px; /* Ensure it doesn't become too small */
            max-width: 300px; /* Optional: limit the maximum width */
            border-right: 1px solid #ccc;
            padding: 1em;
            overflow-y: auto;
            box-sizing: border-box; /* Include padding in the width calculation */
        }

        #chat {
            flex: 1; /* Take up the remaining space */
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        #messages {
            flex: 1; /* Grow to fill the remaining vertical space */
            padding: 1em;
            overflow-y: auto;
            border-bottom: 1px solid #ccc;
            background-color: #f9f9f9;
            box-sizing: border-box; /* Include padding in the width calculation */
        }

        #input-section {
            display: flex;
            padding: 1em;
            border-top: 1px solid #ccc;
            background-color: white;
            align-items: center; /* Vertically align textarea and button */
            box-sizing: border-box;
            gap: 0.5em; /* Space between textarea and button */
            width: 100%; /* Ensure it stays within the parent width */
            overflow: hidden; /* Prevent content from overflowing */
        }

        #input-section textarea {
            flex: 1; /* Take all available space */
            padding: 0.5em;
            border: 1px solid #ccc;
            border-radius: 4px;
            resize: vertical; /* Allow vertical resizing */
            min-height: 6em; /* Minimum height */
            max-height: 20em; /* Optional: Limit the height for multi-line input */
            box-sizing: border-box; /* Include padding in width/height calculation */
            max-width: 90%; /* Prevent it from overflowing the parent */
        }

        #input-section button {
            padding: 0.5em 1em;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            flex-shrink: 0; /* Prevent shrinking */
            box-sizing: border-box; /* Include padding in width */
            min-width: 80px; /* Minimum width */
        }

        #input-section button:hover {
            background-color: #45a049;
        }
        #error {
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            text-align: center;
        }

        #error p {
            color: red;
            margin-bottom: 1em;
        }

        #error button {
            padding: 0.5em 1em;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <header>
        <span>Yahat Chat</span>
        <button id="logout">Logout</button>
    </header>
    <div id="error">
        <p id="error-message"></p>
        <button onclick="location.reload()">Try Again</button>
    </div>
    <main>
        <div id="users" style="display: none;">
            <h3>Users</h3>
            <ul id="user-list"></ul>
        </div>
        <div id="chat" style="display: none;">
            <div id="messages"></div>
            <div id="input-section">
                <textarea id="message" placeholder="Type a message..."></textarea>
                <button id="send">Send</button>
            </div>
        </div>
    </main>

    <script>
        let username = prompt("Enter your username:");

        function showError(message) {
            document.getElementById('error-message').textContent = message;
            document.getElementById('error').style.display = 'flex';
        }

        function showChat() {
            document.getElementById('users').style.display = 'block';
            document.getElementById('chat').style.display = 'flex';
        }

        function populateInitialUserList() {
            fetch('/chat/users', {
                headers: { 'Content-Type': 'application/json' }
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(err => { throw new Error(err.message); });
                }
                return response.json();
            })
            .then(users => {
                users.forEach(user => updateUserList(user, true));
            })
            .catch(error => {
                console.error('Failed to load user list:', error);
            });
        }

        function clearUserListAndMessages() {
            // Clear the user list
            const userList = document.getElementById('user-list');
            userList.innerHTML = '';

            // Clear the messages list
            const messages = document.getElementById('messages');
            messages.innerHTML = '';
        }

        fetch('/chat/join', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username })
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => { throw new Error(err.message); });
            }
            return response.json();
        })
        .then(() => {
            clearUserListAndMessages();
            showChat();
            const eventSource = new EventSource('/chat/stream');

            updateUserList(username, true)

            eventSource.addEventListener('user-joined', (event) => {
                const data = JSON.parse(event.data);
                updateUserList(data.username, true);
            });

            eventSource.addEventListener('user-left', (event) => {
                const data = JSON.parse(event.data);
                updateUserList(data.username, false);
            });

            eventSource.addEventListener('message', (event) => {
                const data = JSON.parse(event.data);
                addMessage(data.username, data.message);
            });

            populateInitialUserList();

            document.getElementById('send').addEventListener('click', () => {
                const textarea = document.getElementById('message');
                const message = textarea.value.trim(); // Trim whitespace
                if (!message) return;

                fetch('/chat/message', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message })
                });

                textarea.value = ''; // Clear the textarea after sending
                textarea.style.height = '2.5em'; // Reset height after sending (optional)
            });

            document.getElementById('logout').addEventListener('click', () => {
                fetch('/chat/logout', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                })
                .then(() => {
                    // Clear the chat and redirect or reload the page
                    clearUserListAndMessages();
                    alert('You have been logged out.');
                    location.reload(); // Optionally, redirect to a login page
                })
                .catch((error) => {
                    console.error('Logout failed:', error);
                    showError('Logout failed. Please try again.');
                });
            });
        })
        .catch(error => {
            showError(error.message);
        });

        function updateUserList(user, isJoining) {
            const userList = document.getElementById('user-list');
            const existingUser = [...userList.children].find(li => li.textContent === user);

            if (isJoining && !existingUser) {
                const li = document.createElement('li');
                li.textContent = user;
                userList.appendChild(li);
            } else if (!isJoining && existingUser) {
                existingUser.remove();
            }
        }

        function addMessage(user, message) {
            const messages = document.getElementById('messages');

            // Create the message container
            const div = document.createElement('div');

            // Create and add the username part (allowing bold formatting)
            const strong = document.createElement('strong');
            strong.textContent = `${user}: `;
            div.appendChild(strong);

            // Create and add the message part (sanitize the message content)
            const pre = document.createElement('pre');
            pre.textContent = message; // Use textContent to escape HTML/JS
            pre.style.margin = '0';
            pre.style.whiteSpace = 'pre-wrap'; // Preserve newlines and indentation
            pre.style.marginLeft = '1em'; // Indent the message
            pre.style.marginBottom = '0.5em'; // Add some space between messages
            div.appendChild(pre);

            // Append the message to the messages list
            messages.appendChild(div);

            // Limit the number of messages to 100
            while (messages.children.length > 100) {
                messages.removeChild(messages.firstChild); // Remove the oldest message
            }
        }

    </script>
</body>
</html>
)content";

    LOG_DEBUG << "WebApp: Processing request " << req.uuid;
    if (req.type != Request::Type::GET) {
        return {405, "Method Not Allowed - only GET is allowed here"};
    }

    return {200, "OK", content, {}, "text/html"};
}
