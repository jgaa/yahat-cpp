#include "WebApp.h"

#include <string>

#include <boost/uuid/uuid_io.hpp>

#include "yahat/HttpServer.h"
#include "yahat/logging.h"

using namespace std;
using namespace yahat;

WebApp::WebApp() {}

yahat::Response WebApp::onReqest(const yahat::Request &req)
{
    // Content generated by ChatGPT
    static const string content = R"content(<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>YahatChat</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            height: 100vh;
            flex-direction: column;
        }
        header {
            background-color: #4CAF50;
            color: white;
            text-align: center;
            padding: 1em;
        }
        #users {
            width: 20%;
            border-right: 1px solid #ccc;
            padding: 1em;
            overflow-y: auto;
        }
        #chat {
            flex: 1;
            display: flex;
            flex-direction: column;
        }
        #messages {
            flex: 1;
            padding: 1em;
            overflow-y: auto;
            border-bottom: 1px solid #ccc;
        }
        #input-section {
            display: flex;
            padding: 1em;
            border-top: 1px solid #ccc;
        }
        #input-section input {
            flex: 1;
            padding: 0.5em;
            margin-right: 0.5em;
        }
        #input-section button {
            padding: 0.5em 1em;
        }
        #error {
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh;
            text-align: center;
        }
        #error p {
            color: red;
            margin-bottom: 1em;
        }
        #error button {
            padding: 0.5em 1em;
            background-color: #4CAF50;
            color: white;
            border: none;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <header>YahatChat</header>
    <div id="error">
        <p id="error-message"></p>
        <button onclick="location.reload()">Try Again</button>
    </div>
    <div id="users" style="display: none;">
        <h3>Users</h3>
        <ul id="user-list"></ul>
    </div>
    <div id="chat" style="display: none;">
        <div id="messages"></div>
        <div id="input-section">
            <input type="text" id="message" placeholder="Type a message...">
            <button id="send">Send</button>
        </div>
    </div>

    <script>
        let username = prompt("Enter your username:");

        function showError(message) {
            document.getElementById('error-message').textContent = message;
            document.getElementById('error').style.display = 'flex';
        }

        function showChat() {
            document.getElementById('users').style.display = 'block';
            document.getElementById('chat').style.display = 'flex';
        }

        fetch('/chat/join', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ username })
        })
        .then(response => {
            if (!response.ok) {
                return response.json().then(err => { throw new Error(err.message); });
            }
            return response.json();
        })
        .then(() => {
            showChat();
            const eventSource = new EventSource(`/chat/stream?user=${encodeURIComponent(username)}`);

            eventSource.onmessage = (event) => {
                const data = JSON.parse(event.data);

                if (event.event === 'user-joined') {
                    updateUserList(data.username, true);
                } else if (event.event === 'user-left') {
                    updateUserList(data.username, false);
                } else if (event.event === 'message') {
                    addMessage(data.username, data.message);
                }
            };

            document.getElementById('send').addEventListener('click', () => {
                const message = document.getElementById('message').value;
                if (!message) return;

                fetch('/chat/message', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message })
                });

                document.getElementById('message').value = '';
            });
        })
        .catch(error => {
            showError(error.message);
        });

        function updateUserList(user, isJoining) {
            const userList = document.getElementById('user-list');
            const existingUser = [...userList.children].find(li => li.textContent === user);

            if (isJoining && !existingUser) {
                const li = document.createElement('li');
                li.textContent = user;
                userList.appendChild(li);
            } else if (!isJoining && existingUser) {
                existingUser.remove();
            }
        }

        function addMessage(user, message) {
            const messages = document.getElementById('messages');
            const div = document.createElement('div');
            div.textContent = `${user}: ${message}`;
            messages.appendChild(div);
        }
    </script>
</body>
</html>
)content";

    LOG_DEBUG << "WebApp: Processing request " << req.uuid;
    if (req.type != Request::Type::GET) {
        return {405, "Method Not Allowed - only GET is allowed here"};
    }

    return {200, "OK", content, {}, "text/html"};
}
